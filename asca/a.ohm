
ascal <: keywords {

Main := ASCScript

ASCScript = ASCComponent+ Signature+

ASCComponent = DefToken ComponentNameDef NameSection EtagsSection
  InputsSection OutputsSection NetsSection LocalsSection
  InitiallySection HandlerSection FinallySection
  ChildrenSection ConnectionsSection

Signature = SignatureToken ComponentNameRef NameSection EtagsSection
  InputsSection OutputsSection


DefSection = DefToken ComponentNameDef
NameSection = kwname ComponentNameRef
EtagsSection = kwetags TagNameDef*
InputsSection = kwinputs TagNameRef*
OutputsSection = kwoutputs TagNameRef*
NetsSection = kwnets NetNameDef*
LocalsSection = kwlocals LocalNameDef*
InitiallySection = kwinitially Code@
HandlerSection = kwhandler HandlerCode@
FinallySection = kwfinally Code@
ChildrenSection = kwchildren Child*
ConnectionsSection = kwconnections Connection*

  Connection = Sender NetNameRef Receiver+
  Child = ComponentNameRef FunctionOrComponent
  FunctionOrComponent = FunctionRef | ComponentNameRef
  FunctionRef = klxlambda FunctionNameRef


    HandlerCode = MessageHandler | Code
    Code = Statement+
    Statement = SynonymStatement | ConcludeStatement | ReturnStatement
           | ConditionalStatement | SendStatement | InjectStatement
	   | ExternalCodeStatement

      SynonymStatement = Lvalue Syn Rvalue
      ConcludeStatement = kwconclude
      ReturnStatement = kwreturn Rvalue*
      SendStatement = kwsend TagName Rvalue
      InjectStatement = kwinject TagName Rvalue
      ExternalCodeStatement = ExternalCode
      ConditionalStatement = Lbracket PredicateTest CondClause+ Rbracket
      MessageHandler = Lbracket HandlerClause+ Rbracket

	CondClause = Choice Rvalue Code
	HandlerClause = Choice TagNameRef Code

	  Lvalue = LocalAccessor
	  Rvalue = BuiltinConstant | LocalAccessor

          LocalAccessor 
            = LocalNameRef Lookup LocalAccessor -- lookup
            | LocalNameRef Slot LocalAccessor   -- slot
            | LocalNameRef                      -- final

	    Sender = ComponentNameRef TagNameRef
	    Receiver = ComponentNameRef TagNameXRef
            PredicateTest = Identifier Args

	    Args = Lpar Rvalue+ Rpar

	    DefToken = kwdef
	    SignatureToken = kwsignature
	    ComponentNameDef = ComponentName
	    ComponentNameRef = ComponentName


	      LocalNameDef = IdentToken
	      LocalNameRef = IdentToken
	      NetNameDef = IdentToken
	      NetNameRef = IdentToken
	      FunctionNameRef = IdentToken
	      TagNameDef = TagName
	      TagNameRef = TagName
	      TagNameXRef = TagName

		Syn = kwsynonym
		ComponentName = klxlbracket SubIdentToken+ klxrbracket
		TagName = klxlport SubIdentToken+ klxrport
		Identifier 
                  = klxlpar SubIdentToken+ klxrpar -- multiple
                  | SubIdentToken                                  -- single
		Lbracket = klxlbracket
		Rbracket = klxrbracket
		Lpar = klxlpar
		Rpar = klxrpar
		Langle = klxlangle
		Rangle = klxrangle
		Choice = klxchoice
		Slot = klxdot
		Lookup = klxlookup
		Yes = kwyes
		No = kwno
		Trigger = kwtrigger
		MessageData = kwmessagedata
		MessageEtag = kwmessageetag
		Synonym = klxsynonym

                BuiltinConstant = Yes | No | Trigger | MessageData | MessageEtag

  LxKwToken<s> = KwToken<s>
  KwToken<s> = CompoundKwToken KwSecondToken<s> KWContent LineToken@
  KwSecondToken<s> = "{" dq "token" dq ":" dq "keyword" dq "," dq "tag" dq ":" dq s dq"}" ","@ LineToken@
  CompoundKwToken = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" dq "keyword" dq "}" ","@ LineToken@

  ExternalCode = CodeToken  LineToken@
