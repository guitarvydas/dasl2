tokens {
main = wsnl* token+
  
token 
  = lexical -- lexical
  // | key &wsnl                    -- key
  // | builtin &terminatorOrWsnlOrEnd -- builtin
  // | "connections" &terminatorOrWsnlOrEnd  -- connections
  | externalCode -- code
  | wsRun -- wsRun
  | nlRun -- nlRun
  | ident -- ident
  | char -- other


wsRun = ws+
nlRun = eol+

externalCode = "{" externalCodeStuff* "}"
externalCodeStuff
  = "{" externalCodeStuff* "}" -- nested
  | ~"}" any -- char

char = ~wsnl any

ident = identFirst identRest* &terminatorOrWsnlOrEnd
identFirst = identRest
identRest = ~lexical ~wsnl any

string = dq stringChar* dq &terminatorOrWsnlOrEnd
dq = "\""
stringChar = ~dq any

comment = "//" commentChar* eolOrEnd
commentChar = ~eol any
eol = "\n"
ws = " " | "\t" | comment
space := ws
wsnl = ws | eol

eolOrEnd = ws | eol | end
terminator = lexical | ws
terminatorOrWsnlOrEnd = terminator | eolOrEnd
wsOrEnd = ws | end

/////

keyword = keywordIdent &terminatorOrWsnlOrEnd

keywordIdent
  = lexical
  | "self"
  | "name"
  | "def"
  | "signature"
  | "etags"
  | "inputs"
  | "outputs"
  | "nets"
  | "locals"
  | "initially"
  | "handler"
  | "finally"
  | "children"
  | "connections"
  | "Yes"
  | "No"
  | "Nil"
  | "Inject"
  | "Send"
  | "Conclude"
  | "Args"
  | "?data"
  | "?etag"

lexical = lexLookup | lexLambda | lexDot | lexLPAR | lexRPAR | lexLBracket | lexRBracket
  | lexLPort | lexRPort
  
 lexLookup = "∞"
 lexLambda ="λ"
 lexDot = "."
 lexLPAR = "("
 lexRPAR = ")"
 lexLBracket ="["
 lexRBracket = "]"
 lexLPort = "«"
 lexRPort = "»"

/////


}
