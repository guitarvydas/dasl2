tokens {
main = wsnl* token+
  
token 
  = key &wsnl                    -- key
  | builtin &terminatorOrWsnlOrEnd -- builtin
  | "connections" &terminatorOrWsnlOrEnd  -- connections
  | lexical &terminatorOrWsnlOrEnd  -- lexical
  | tokenWithoutTerminator  -- other
  
tokenWithoutTerminator
  = componentName
  | portName

  | externalCode
  | ident
  | wsRun
  | nlRun
  | char

key
  = "def"
  | "signature"
  | "name"
  | "etags"
  | "inputs"
  | "outputs"
  | "nets"
  | "locals"
  | "initially"
  | "handler"
  | "finally"
  | "children"

builtin =
  | "Yes"
  | "No"
  | "Nil"
  | "Trigger"
  | "Conclude"
  | "Args"
  | "Return"
  | "Send"
  | "Inject"
  | "?data"
  | "?etag"



wsRun = ws+
nlRun = eol+

componentName = "[" ident+ "]" 
portName = "«" ident+ "»"

externalCode = "{" externalCodeChar* "}"
externalCodeChar
  = "{" externalCode* "}" -- nested
  | ~"}" any              -- char

char = ~wsnl any

ident = identFirst identRest* &terminatorOrWsnlOrEnd
identFirst = ~keyword identRest
identRest = ~lexical ~wsnl any

string = dq stringChar* dq &terminatorOrWsnlOrEnd
dq = "\""
stringChar = ~dq any

comment = "//" commentChar* eolOrEnd
commentChar = ~eol any
eol = "\n"
ws = " " | "\t" | comment
space := ws
wsnl = ws | eol

eolOrEnd = ws | eol | end
terminator = lexical | ws
terminatorOrWsnlOrEnd = terminator | eolOrEnd
wsOrEnd = ws | end

/////

keyword = keywordIdent &terminatorOrWsnlOrEnd

keywordIdent
  = lexical
  | "self"
  | "name"
  | "def"
  | "signature"
  | "etags"
  | "inputs"
  | "outputs"
  | "nets"
  | "locals"
  | "initially"
  | "handler"
  | "finally"
  | "children"
  | "connections"
  | "Yes"
  | "No"
  | "Nil"
  | "Inject"
  | "Send"
  | "Conclude"
  | "Args"
  | "?data"
  | "?etag"

lexical = lexLookup | lexLambda | lexDot | lexLPAR | lexRPAR | lexLBracket | lexRBracket
  | lexLPort | lexRPort
  
 lexLookup = "∞"
 lexLambda ="λ"
 lexDot = "."
 lexLPAR = "("
 lexRPAR = ")"
 lexLBracket ="["
 lexRBracket = "]"
 lexLPort = "«"
 lexRPort = "»"

/////


}

