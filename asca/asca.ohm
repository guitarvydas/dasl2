


basictoken {
// basic token
  Main = Token+

  Token = NLToken | WSToken | LexToken | TextToken | IdentToken | CompoundToken | EndCompoundToken
  GenericToken = "{" dq "token" dq ":" string "," dq "content" dq ":" string "}" ","?

  NLToken = "{" dq "token" dq ":" dq "nl" dq "," dq "content" dq ":" string "}" ","?
  WSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
  LexToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" string "}" ","?
  TextToken = "{" dq "token" dq ":" dq "text" dq "," dq "content" dq ":" string "}" ","?
  CodeToken = "{" dq "token" dq ":" dq "code" dq "," dq "content" dq ":" string "}" ","?
  IdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  CompoundToken = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" string "}" ","?
  EndCompoundToken = "{" dq "token" dq ":" dq "endcompound" dq "," dq "tag" dq ":" string "}" ","?

  string = dq stringChar* dq
  dq = "\""
  stringChar = ~dq any

  number = digit+

}

linenumbers <: basictoken {
  Main := Token+
  Token += LineToken
  LineToken = "{" dq "token" dq ":" dq "line" dq "," dq "content" dq ":" number "}" ","?
}

brackets <: linenumbers {
  Token += LbracketToken | RbracketToken | LportToken | RportToken | LineToken
  LbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%5B" dq "}" ","?
  RbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq  "%5D" dq "}" ","?
  LportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%AB" dq "}" ","?
  RportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%BB" dq "}" ","?
}

compoundidents <: brackets {
  Main := CompoundIdentToken+
  CompoundIdentToken = Component | Port | Token
  Component = LbracketToken CompoundName+ RbracketToken
  Port = LportToken CompoundName+ RportToken
  CompoundName = OldSubIdentToken | SubWSToken
  OldSubIdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  SubWSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
}

subident <: compoundidents{
  Token += SubIdentToken
  SubIdentToken = "{" dq "token" dq ":" dq "subident" dq "," dq "content" dq ":" string "}" ","?
}

keywords <: subident {
  Token += Keyword | CompoundTokenKW | KeywordToken
  
  Keyword = CompoundTokenKW KeywordToken KWContent

  KWContent = IdentToken | LexToken

  CompoundTokenKW = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" dq "keyword" dq "}" ","?
  KeywordToken = "{" dq "token" dq ":" dq "keyword" dq "," dq "tag" dq ":" string "}" ","?
}


untokenize <: keywords {
}

ascal <: keywords {

Main := ASCScript

ASCScript = ASCComponent+ Signature+

ASCComponent = DefToken ComponentNameDef NameSection EtagsSection
  InputsSection OutputsSection NetsSection LocalsSection
  InitiallySection HandlerSection FinallySection
  ChildrenSection ConnectionsSection

Signature = SignatureToken ComponentNameRef NameSection EtagsSection
  InputsSection OutputsSection


DefSection = DefToken ComponentNameDef
NameSection = "id" ComponentNameRef
EtagsSection = "etags" TagNameDef*
InputsSection = "inputs" TagNameRef*
OutputsSection = "outputs" TagNameRef*
NetsSection = "nets" NetNameDef*
LocalsSection = "locals" LocalNameDef*
InitiallySection = "initially" Code?
HandlerSection = "handler" HandlerCode?
FinallySection = "finally" Code?
ChildrenSection = "children" Child*
ConnectionsSection = "connections" Connection*

  Connection = Sender NetNameRef "⎣" Receiver+ "⎦"
  Child = ComponentNameRef FunctionOrComponent
  FunctionOrComponent = FunctionRef | ComponentNameRef
  FunctionRef = "λ" FunctionNameRef


    HandlerCode = (MessageHandler | Statement)+
    Code = Statement+
    Statement = SynonymStatement | ConcludeStatement | ReturnStatement
           | ConditionalStatement | SendStatement | InjectStatement
           | ExternalCodeStatement

      SynonymStatement = Lvalue "=" Rvalue
      ConcludeStatement = "Conclude"
      ReturnStatement = "Return" Rvalue*
      SendStatement = "Send" OwnTag Rvalue
      InjectStatement = "Inject" Receiver Rvalue
      ExternalCodeStatement = ExternalCode
      ConditionalStatement = "[" PredicateTest CondClause+ "]"
      MessageHandler = "[" HandlerClause+ "]"

        CondClause = "|" Rvalue ":" Code
        HandlerClause = "|" TagNameRef ":" Code

          Lvalue = LocalAccessor
          Rvalue = BuiltinConstant | LocalAccessor

          LocalAccessor 
            = LocalNameRef "∞" LocalAccessor -- lookup
            | LocalNameRef "." LocalAccessor -- slot
            | LocalNameRef                   -- final

            Sender = ComponentNameRef TagNameRef
            Receiver = ComponentNameRef TagNameXRef
            PredicateTest = LocalAccessor Args

            Args = "(" Rvalue* ")"

            DefToken = "def"
            SignatureToken = "signature"
            ComponentNameDef = ComponentName
            ComponentNameRef = ComponentName


              LocalNameDef = ident
              LocalNameRef = ArgsKW | ident
              NetNameDef = ident
              NetNameRef = ident
              FunctionNameRef = ident
              TagNameDef = TagName
              TagNameRef = TagName
              TagNameXRef = TagName
	      OwnTag = TagNameRef

                ComponentName = "[" #identIncludingSpaces "]"
                TagName = "«" #identIncludingSpaces "»"
                Yes = "Yes"
                No = "No"
                Trigger = "Trigger"
                ArgsKW = "Args"
                MessageData = "?data"
                MessageEtag = "?etag"

                BuiltinConstant = Yes | No | Trigger | MessageData | MessageEtag

                    keyword
                      = "id"
                      | "etags"
                      | "inputs"
                      | "outputs"
                      | "nets"
                      | "locals"
                      | "initially"
                      | "handler"
                      | "finally"
                      | "children"
                      | "connections"
                      | "Conclude"
                      | "Return"
                      | "Send"
                      | "Inject"
                      | "def"
                      | "signature"
                      | "Yes"
                      | "No"
                      | "Trigger"
                      | "Args"
                      | "messagedata"
                      | "messageetag"

  ExternalCode = "{" #(uriChar+) "}"
  uriChar = ~"}" any

  identIncludingSpaces = identCharIncludingSpace+
  identCharIncludingSpace = ~")" ~"]" ~"»" ~nl any
  ident = ~keyword ~separator identFirst identRest*
  identFirst = ~space ~digit ~separator any
  identRest = "0" .. "9" | identFirst
  nl = "\n"
  separator = ")" | "]" | "(" | "[" | "{" | "}" | "="
            | "|" | "." | "∞"
            | "⎣" | "⎦"
	    | "〖" | "〗"

  lineNumber = "〖" digit+ "〗"
  space += lineNumber
}



