


basictoken {
// basic token
  Main = Token+

  Token = NLToken | WSToken | LexToken | TextToken | IdentToken | CompoundToken | EndCompoundToken | VerbatimToken
  GenericToken = "{" dq "token" dq ":" string "," dq "content" dq ":" string "}" ","?

  NLToken = "{" dq "token" dq ":" dq "nl" dq "," dq "content" dq ":" string "}" ","?
  WSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
  LexToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" string "}" ","?
  TextToken = "{" dq "token" dq ":" dq "text" dq "," dq "content" dq ":" string "}" ","?
  CodeToken = "{" dq "token" dq ":" dq "code" dq "," dq "content" dq ":" string "}" ","?
  IdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  CompoundToken = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" string "}" ","?
  EndCompoundToken = "{" dq "token" dq ":" dq "endcompound" dq "," dq "tag" dq ":" string "}" ","?
  VerbatimToken = "{" dq "token" dq ":" dq "verbatim" dq "," dq "content" dq ":" dq stringChar+ dq "}" ","?

  string = dq stringChar* dq
  dq = "\""
  stringChar = ~dq any

  number = digit+

}

linenumbers <: basictoken {
  Main := Token+
  Token += LineToken
  LineToken = "{" dq "token" dq ":" dq "line" dq "," dq "content" dq ":" number "}" ","?
}

brackets <: linenumbers {
  Token += LbracketToken | RbracketToken | LportToken | RportToken | LineToken
  LbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%5B" dq "}" ","?
  RbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq  "%5D" dq "}" ","?
  LportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%AB" dq "}" ","?
  RportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%BB" dq "}" ","?
}

compoundidents <: brackets {
  Main := CompoundIdentToken+
  CompoundIdentToken = Component | Port | Token
  Component = LbracketToken CompoundName+ RbracketToken
  Port = LportToken CompoundName+ RportToken
  CompoundName = OldSubIdentToken | SubWSToken
  OldSubIdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  SubWSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
}

subident <: compoundidents{
  Token += SubIdentToken
  SubIdentToken = "{" dq "token" dq ":" dq "subident" dq "," dq "content" dq ":" string "}" ","?
}

keywords <: subident {
  Token += Keyword | CompoundTokenKW | KeywordToken
  
  Keyword = CompoundTokenKW KeywordToken KWContent

  KWContent = IdentToken | LexToken

  CompoundTokenKW = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" dq "keyword" dq "}" ","?
  KeywordToken = "{" dq "token" dq ":" dq "keyword" dq "," dq "tag" dq ":" string "}" ","?
}


untokenize <: keywords {
}

ascal <: keywords {

Main := ASCScript

ASCScript = ASCComponent+ Signature+

ASCComponent = DefTopLevel NameSection EtagsSection
  InputsSection OutputsSection NetsSection OwnSection
  InitiallySection HandlerSection FinallySection
  ChildrenSection ConnectionsSection

Signature = SignatureTopLevel NameSection EtagsSection
  InputsSection OutputsSection


DefTopLevel = "def" ComponentName
SignatureTopLevel = "signature" ComponentName
NameSection = "id" ComponentName
EtagsSection = "etags" TagNameDestructuringListItem*
InputsSection = "inputs" TagNameListItem*
OutputsSection = "outputs" TagNameListItem*
NetsSection = "nets" NetNameListItem*
OwnSection = "own" TempNameDestructuringListItem*

InitiallySection
  = "initially" AnonymousFunction -- op
  | "initially"           -- empty
  
HandlerSection
  = "handler" AnonymousHandlerFunction -- op
  | "handler"         -- empty
FinallySection
  = "finally" AnonymousFunction -- op
  | "finally"           -- empty

ChildrenSection
  = "children" Child+ -- op
  | "children"           -- empty
  
ConnectionsSection
  = "connections" Operation -- op
  | "connections"           -- empty


AnonymousFunction = Operation
Operation = Op
Op
 = ident "⤶" ident           Operation?             -- CreateAndSetTempFromArgs
 | ident "⥀" ident            Operation?            -- CreateAndSetTempFromLookup
 | ident "⇐" Constant        Operation?             -- SetOwnFromConstant
 | "Inject" ComponentName PortName ident Operation? -- InjectFromTemp
 | ident "⇐" verbatimident   Operation?             -- SetOwnFromVerbatim
 | ident "⇐" "?data"         Operation?             -- SetOwnFromMessageData
 | ident "⇐" "?etag"         Operation?             -- SetOwnFromMessageEtag
 | "Conclude"                Operation?             -- Conclude
 | "Pass"                    Operation?             -- Pass
 | "Return" ReturnItem+           Operation?             -- ReturnOwnVariables
 | "〔$self〕" PortName NetName ComponentName PortName Operation? -- SelfConnection
 | ComponentName PortName NetName ComponentName PortName Operation? -- ChildConnection
 | ComponentName PortName NetName "〔$self〕" PortName Operation? -- ChildToSelfConnection
 | ident "." ident "(" Arg+ ")"  Operation?         -- CallPredicateOfTempWithArgs
 | ident "." ident "(" ")"       Operation?         -- CallPredicateOfTempWithNoArgs
 | "Send" PortName verbatimident  Operation?        -- SendVerbatim
 | "Send" PortName Constant      Operation?         -- SendConstant
 | "Send" PortName "@" ident "." ident "(" ")"  Operation?  -- SendCallMethodWithNoArgs
 | "Send" PortName "?data"       Operation?         -- SendMessageData
 | "[" "@" ident "." ident "(" Arg+ ")" CondClause+ "]" Operation? -- ConditionalMethodWithArgs
 | "[" "@" ident "." ident "(" ")" CondClause+ "]" Operation? -- ConditionalMethod
 | "[" "@" ident "(" Arg+ ")" CondClause+ "]" Operation?     -- ConditionalFunctionWithArgs
 | "[" "@" ident "(" ")" CondClause+ "]" Operation?     -- ConditionalFunction
 | "@" ident "(" Arg+ ")"        Operation?         -- CallExternalPredicateWithArgs
 | "@" ident "(" ")"             Operation?         -- CallExternalPredicateNoArgs
 | Handler                       Operation?         -- handler


Child = ChildSelfExternalFunction | ChildComponent
ChildSelfExternalFunction = "〔$self〕" "λ" ident
ChildComponent = ComponentName ComponentName



AnonymousHandlerFunction = Operation
Handler
  = "⎡" HandlerClauseWithoutDefault+ "⎦"  -- withoutDefault
  | "⎡" HandlerClauseWithDefault+ "⎦"     -- withDefault


CondClause = CondClauseWithTest | DefaultCondClause
CondClauseWithTest = "|" Constant ":" Operation
DefaultCondClause = "|" ":" Operation

HandlerClauseWithDefault = MessageHandlerClause | DefaultHandlerClause
HandlerClauseWithoutDefault = MessageHandlerClause
DefaultHandlerClause = "•" ":" Operation
MessageHandlerClause = "•" PortName ":" Operation

Constant
  = "Yes"     -- yes
  | "No"      -- no
  | "Trigger" -- trigger
  | "None"    -- none



  ComponentName = "〔" identIncludingSpaces+ "〕"
  PortName = TagName
  TagName = "«" identIncludingSpaces+ "»"
  NetName = ident
  TempName = ident

TagNameListItem = TagName
TagNameDestructuringListItem = TagName
NetNameListItem = ident
TempNameDestructuringListItem = ident
ReturnItem = ident
Arg = ident




                    keyword
                      = "id"
                      | "etags"
                      | "inputs"
                      | "outputs"
                      | "nets"
                      | "own"
                      | "initially"
                      | "handler"
                      | "finally"
                      | "children"
                      | "connections"
                      | "Conclude"
                      | "Pass"
                      | "Return"
                      | "Send"
                      | "Inject"
                      | "def"
                      | "signature"
                      | "Yes"
                      | "No" 
                      | "Trigger"
                      | "Args"
                      | "messagedata"
                      | "messageetag"

  ExternalCode = "{" #(uriChar+) "}"
  uriChar 
    = "{" #(uriChar+) "}" -- nested
    | ~"{" ~"}" any       -- char

  identIncludingSpaces = ~separator identCharIncludingSpace+
  identCharIncludingSpace = ~separator ~nl any
  ident
    = "⟨" identIncludingSpaces "⟩" -- bracketed
    | verbatimident                    -- verbatim
    | identFirst identRest*        -- raw
  identFirst = ~space ~digit ~separator ~keyword any
  identRest = ~space ~separator ~keyword ("0" .. "9" | identFirst)
  verbatimident = "◻" ident
  nl = "\n"
  separator = ")" | "]" | "(" | "[" | "]" | "{" | "}"
            | "⇐" | "≡"
            | "«" | "»"
            | "|" | "." | "∞" | "⤶"
            | "⎣" | "⎦"
	    | "〖" | "〗"
            | "⟨" | "⟩"
            | "〔" | "〕"
            | "⎡" | "⎦" | "•"
	    | "λ"

  lineNumber = "〖" digit+ "〗"
  space += lineNumber
}
