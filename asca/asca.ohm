


basictoken {
// basic token
  Main = Token+

  Token = NLToken | WSToken | LexToken | TextToken | IdentToken | CompoundToken | EndCompoundToken
  GenericToken = "{" dq "token" dq ":" string "," dq "content" dq ":" string "}" ","?

  NLToken = "{" dq "token" dq ":" dq "nl" dq "," dq "content" dq ":" string "}" ","?
  WSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
  LexToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" string "}" ","?
  TextToken = "{" dq "token" dq ":" dq "text" dq "," dq "content" dq ":" string "}" ","?
  CodeToken = "{" dq "token" dq ":" dq "code" dq "," dq "content" dq ":" string "}" ","?
  IdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  CompoundToken = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" string "}" ","?
  EndCompoundToken = "{" dq "token" dq ":" dq "endcompound" dq "," dq "tag" dq ":" string "}" ","?

  string = dq stringChar* dq
  dq = "\""
  stringChar = ~dq any

  number = digit+

}

linenumbers <: basictoken {
  Main := Token+
  Token := LineToken | ...
  LineToken = "{" dq "token" dq ":" dq "line" dq "," dq "content" dq ":" number "}" ","?
}

brackets <: linenumbers {
  Token := LbracketToken | RbracketToken | LportToken | RportToken | LineToken | ...
  LbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%5B" dq "}" ","?
  RbracketToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq  "%5D" dq "}" ","?
  LportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%AB" dq "}" ","?
  RportToken = "{" dq "token" dq ":" dq "lex" dq "," dq "content" dq ":" dq "%C2%BB" dq "}" ","?
}

compoundidents <: brackets {
  Main := CompoundIdentToken+
  CompoundIdentToken = Component | Port | Token
  Component = LbracketToken CompoundName+ RbracketToken
  Port = LportToken CompoundName+ RportToken
  CompoundName = OldSubIdentToken | SubWSToken
  OldSubIdentToken = "{" dq "token" dq ":" dq "ident" dq "," dq "content" dq ":" string "}" ","?
  SubWSToken = "{" dq "token" dq ":" dq "ws" dq "," dq "content" dq ":" string "}" ","?
}

subident <: compoundidents{
  Token := SubIdentToken  | ...
  SubIdentToken = "{" dq "token" dq ":" dq "subident" dq "," dq "content" dq ":" string "}" ","?
}

keywords <: subident {
  Token := Keyword | CompoundTokenKW | KeywordToken | ...
  
  Keyword = CompoundTokenKW KeywordToken KWContent

  KWContent = IdentToken | LexToken

  CompoundTokenKW = "{" dq "token" dq ":" dq "compound" dq "," dq "tag" dq ":" dq "keyword" dq "}" ","?
  KeywordToken = "{" dq "token" dq ":" dq "keyword" dq "," dq "tag" dq ":" string "}" ","?
}


untokenize <: keywords {
}

ascal <: keywords {

Main := ASCScript

ASCScript = ASCComponent+ Signature+

ASCComponent = DefToken ComponentNameDef NameSection EtagsSection
  InputsSection OutputsSection NetsSection LocalsSection
  InitiallySection HandlerSection FinallySection
  ChildrenSection ConnectionsSection

Signature = SignatureToken ComponentNameRef NameSection EtagsSection
  InputsSection OutputsSection


DefSection = DefToken ComponentNameDef
NameSection = "id" ComponentNameRef
EtagsSection = "etags" TagNameDef*
InputsSection = "inputs" TagNameRef*
OutputsSection = "outputs" TagNameRef*
NetsSection = "nets" NetNameDef*
LocalsSection = "locals" LocalNameDef*
InitiallySection = "initially" Code?
HandlerSection = "handler" HandlerCode?
FinallySection = "finally" Code?
ChildrenSection = "children" Child*
ConnectionsSection = "connections" Connection*

  Connection = Sender NetNameRef Receiver+
  Child = ComponentNameRef FunctionOrComponent
  FunctionOrComponent = FunctionRef | ComponentNameRef
  FunctionRef = "λ" FunctionNameRef


    HandlerCode = MessageHandler | Code
    Code = Statement+
    Statement = SynonymStatement | ConcludeStatement | ReturnStatement
           | ConditionalStatement | SendStatement | InjectStatement
	   | ExternalCodeStatement

      SynonymStatement = Lvalue Syn Rvalue
      ConcludeStatement = "conclude"
      ReturnStatement = "return" Rvalue*
      SendStatement = "send" TagName Rvalue
      InjectStatement = "inject" TagName Rvalue
      ExternalCodeStatement = ExternalCode
      ConditionalStatement = "[" PredicateTest CondClause+ "]"
      MessageHandler = "[" HandlerClause+ "]"

	CondClause = Choice Rvalue Code
	HandlerClause = Choice TagNameRef Code

	  Lvalue = LocalAccessor
	  Rvalue = BuiltinConstant | LocalAccessor

          LocalAccessor 
            = LocalNameRef Lookup LocalAccessor -- lookup
            | LocalNameRef Slot LocalAccessor   -- slot
            | LocalNameRef                      -- final

	    Sender = ComponentNameRef TagNameRef
	    Receiver = ComponentNameRef TagNameXRef
            PredicateTest = Identifier Args

	    Args = "(" Rvalue+ ")"

	    DefToken = "def"
	    SignatureToken = "signature"
	    ComponentNameDef = ComponentName
	    ComponentNameRef = ComponentName


	      LocalNameDef = IdentToken
	      LocalNameRef = ArgsKW | IdentToken
	      NetNameDef = IdentToken
	      NetNameRef = IdentToken
	      FunctionNameRef = IdentToken
	      TagNameDef = TagName
	      TagNameRef = TagName
	      TagNameXRef = TagName

		Syn = "="
		ComponentName = "[" SubIdentToken+ "]"
		TagName = "«" SubIdentToken+ "»"
		Identifier 
                  = "(" SubIdentToken+ ")" -- multiple
                  | SubIdentToken          -- single
		Choice = "|"
		Slot = "."
		Lookup = "∞"
		Yes = "yes"
		No = "no"
		Trigger = "trigger"
		ArgsKW = "args"
		MessageData = "messagedata"
		MessageEtag = "messageetag"
		Synonym = "="

                BuiltinConstant = Yes | No | Trigger | MessageData | MessageEtag | ArgsKW

  ExternalCode = "{" #(uriChar+) "}"

  uriChar = ~"}" any
}
