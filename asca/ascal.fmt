Main [ ASCScript] = [[${ASCScript}]]
ASCScript [ @ASCComponent @Signature] = [[${ASCComponent}${Signature}]]
ASCComponent [ DefSection ComponentNameDef NameSection EtagsSection InputsSection OutputsSection NetsSection LocalsSection InitiallySection HandlerSection FinallySection ChildrenSection ConnectionsSection] =
[[(defparameter ${DefSection}\n\`(\n${NameSection}${EtagsSection}${InputsSection}${OutputsSection}${NetsSection}${LocalsSection}${InitiallySection}${HandlerSection}${FinallySection}${ChildrenSection}${ConnectionsSection}\)\)\n]]
Signature [ SignatureToken ComponentNameRef NameSection EtagsSection InputsSection OutputsSection] = [[${SignatureToken}${ComponentNameRef}${NameSection}${EtagsSection}${InputsSection}${OutputsSection}]]

DefSection [ DefToken ComponentNameDef] = [[${ComponentNameDef}]]
NameSection [ kwname ComponentNameRef] = [[(name . ${ComponentNameRef})\n]]
EtagsSection [ kwetags @TagNameDef] = [[(etags . (${TagNameDef}))\n]]
InputsSection [ kwinputs @TagNameRef] = [[(inputs . (${TagNameRef}))\n]]
OutputsSection [ kwoutputs @TagNameRef] = [[(outputs . (${TagNameRef}))\n]]
NetsSection [ kwnets @NetNameDef] = [[(nets . (${NetNameDef}))\n]]
LocalsSection [ kwlocals @LocalNameDef] = [[(locals . (${LocalNameDef}))\n]]
InitiallySection [ kwinitially @Code] = [[(initially . ,(lambda ($context) ${Code}))\n]]
HandlerSection [ kwhandler @HandlerCode] = [[(handler . ,(lambda ($context) ${HandlerCode}))\n]]
FinallySection [ kwfinally @Code] = [[(finally . ,(lambda ($context) ${Code}))\n]]
ChildrenSection [ kwchildren @Child] = [[${kwchildren}${Child}\n]]
ConnectionsSection [ kwconnections @Connection] = [[${kwconnections}${Connection}\n]]

Connection [ Sender NetNameRef left @Receiver right] = [[${Sender}${NetNameRef}${left}${Receiver}${right}]]
Child [ ComponentNameRef FunctionOrComponent] = [[${ComponentNameRef}${FunctionOrComponent}]]
FunctionOrComponent [ fc] = [[${fc}]]
FunctionRef [ klxlambda FunctionNameRef] = [[${klxlambda}${FunctionNameRef}]]
HandlerCode [ pre mh post ] = [[${pre}${mh}${post}]]
Code [Statement] = [[${Statement}]]

Statement [ st] = [[${st}\n]]
SynonymStatement [ Lvalue Syn Rvalue @continuation] = [[\n(let ((${support.makeLispVar (Lvalue)} ${Rvalue}))\n${continuation})\n]]
ConcludeStatement [ kwconclude @continuation] = [[($dispatch-conclude $context)\n${continuation})]]
ReturnStatement [ kwreturn @Rvalue @continuation] = [[(values ${Rvalue})\n${continuation}]]
SendStatement [ kwsend TagName Rvalue @continuation] = [[${kwsend}${TagName}${Rvalue}\n${continuation}]]
InjectStatement [ kwinject TagName Rvalue @continuation] = [[${kwinject}${TagName}${Rvalue}\n${continuation}]]
ExternalCodeStatement [ ExternalCode @continuation] = [[(assert nil) ;; ${ExternalCode}\n${continuation}]]
ConditionalStatement [ Lbracket PredicateTest @CondClause Rbracket @continuation] = [[${Lbracket}${PredicateTest}${CondClause}${Rbracket}\n${continuation}]]
MessageHandler [ Lbracket @HandlerClause Rbracket @continuation] = [[${Lbracket}${HandlerClause}${Rbracket}\n${continuation}]]
CondClause [ Choice Rvalue kcolon Code] = [[${Choice}${Rvalue}${kcolon}${Code}]]
HandlerClause [ Choice TagNameRef kcolon Code] = [[${Choice}${TagNameRef}${kcolon}${Code}]]
Lvalue [ LocalAccessor] = [[${LocalAccessor}]]
Rvalue [ bl] = [[${bl}]]
LocalAccessor_call [a args] = [[${a}${args}]]
LocalAccessor_lookup [ LocalNameRef Lookup LocalAccessor] = [[${LocalNameRef}${Lookup}${LocalAccessor}]]
LocalAccessor_slot [ LocalNameRef Slot LocalAccessor] = [[${LocalNameRef}${Slot}${LocalAccessor}]]
LocalAccessor_final [ LocalNameRef] = [[${LocalNameRef}]]
Sender [ ComponentNameRef TagNameRef] = [[${ComponentNameRef}${TagNameRef}]]
Receiver [ ComponentNameRef TagNameXRef] = [[${ComponentNameRef}${TagNameXRef}]]
Args [ Lpar @Rvalue Rpar] = [[${Lpar}${Rvalue}${Rpar}]]
DefToken [ kwdef] = [[${kwdef}]]
SignatureToken [ kwsignature] = [[${kwsignature}]]
ComponentNameDef [ ComponentName] = [[${ComponentName}]]
ComponentNameRef [ ComponentName] = [[${ComponentName}]]
LocalNameDef [ IdentToken] = [[${IdentToken}]]
LocalNameRef [ IdentToken] = [[${IdentToken}]]
NetNameDef [ IdentToken] = [[${IdentToken}]]
NetNameRef [ IdentToken] = [[${IdentToken}]]
FunctionNameRef [ IdentToken] = [[${IdentToken}]]
TagNameDef [ TagName] = [[${TagName}]]
TagNameRef [ TagName] = [[${TagName}]]
TagNameXRef [ TagName] = [[${TagName}]]
ComponentName [ klxlbracket ident klxrbracket] = [[${ident}]]
TagName [ klxlport ident klxrport] = [[${ident}]]
Yes [ kwyes] = [[T]]
No [ kwno] = [[nil]]
Trigger [ kwtrigger] = [[T]]
ArgsKW [a] = [[${a}]]
MessageData [ kwmessagedata] = [[(?data-from-message $message)]]
MessageEtag [ kwmessageetag] = [[(?etag-from-message $message)]]
BuiltinConstant [ kw] = [[${kw}]]


Token [t] = [[${t}]]

GenericToken [klb dq1 ktoken dq2 kcolon s1 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${s1}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
NLToken [klb dq1 ktoken dq2 kcolon dq5 knl dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${knl}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
WSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kws}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
LexToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
TextToken [klb dq1 ktoken dq2 kcolon dq5 ktext dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ktext}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
IdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
CompoundToken [klb dq1 ktoken dq2 kcolon dq5 kcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kcompoun}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
EndCompoundToken [klb dq1 ktoken dq2 kcolon dq5 kendcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kendcompound}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]


string [dq1 @cs dq2] = [[${dq1}${cs}${dq2}]]
dq [c] = [[${c}]]
stringChar [c] = [[${c}]]

number [@ds] = [[${ds}]]

LineToken [klb dq1 ktoken dq2 kcolon dq5 kline dq6 kcomma dq3 kcontent dq4 kcolon2 nn krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kline}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${nn}${krb}${optcomma}\n]]

LportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
LbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]


  CompoundIdentToken [t] = [[${t}]]
  Component [lb @compoundname rb] = [[${lb}${compoundname}${rb}]]
  Port [lp @compoundname rp] = [[${lp}${compoundname}${rp}]]
  CompoundName [t] = [[${t}]]
SubWSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
OldSubIdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



SubIdentToken [klb dq1 ktoken dq2 kcolon dq5 ksubident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ksubident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [[ "${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [[ "${support.mangle (compoundident)}"]]
  ident_raw [identfirst @identrest] = [[ "${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  nl [c] = [[${c}]]

  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]
