Main [ ASCScript] = [[${ASCScript}]]
ASCScript [ @ASCComponent @Signature] = [[${ASCComponent}${Signature}]]

ASCComponent [ DefSection NameSection EtagsSection InputsSection OutputsSection NetsSection LocalsSection InitiallySection HandlerSection FinallySection ChildrenSection ConnectionsSection] =
[[(defparameter *${support.makeLispName (DefSection)}*\n\`(\n${NameSection}${EtagsSection}${InputsSection}${OutputsSection}${NetsSection}${LocalsSection}${InitiallySection}${HandlerSection}${FinallySection}${ChildrenSection}${ConnectionsSection}\)\)\n]]

Signature [ SignatureToken ComponentNameRef NameSection EtagsSection InputsSection OutputsSection] 
  = [[(defparameter *${support.makeLispName (ComponentNameRef)}-signature*${NameSection}${EtagsSection}${InputsSection}${OutputsSection}]]

DefTopLevel [ DefToken ComponentNameDef] = [[${ComponentNameDef}]]
NameSection [ kwname ComponentNameRef] = [[\n(name . ${ComponentNameRef})]]
EtagsSection [ kwetags @TagNameDef] = [[\n(etags . (${TagNameDef}))]]
InputsSection [ kwinputs @TagNameRef] = [[\n(inputs . (${TagNameRef}))]]
OutputsSection [ kwoutputs @TagNameRef] = [[\n(outputs . (${TagNameRef}))]]
NetsSection [ kwnets @NetNameDef] = [[\n(nets . (${NetNameDef}))]]
LocalsSection [ kwlocals @LocalNameDef] = [[\n(locals . (${LocalNameDef}))]]
InitiallySection_code [ kwinitially Code] = [[\n(initially . ,(lambda ($context) ${Code}))]]
InitiallySection_empty [ kwinitially] = [[\n(initially . nil)]]
HandlerSection_code [ kwhandler HandlerCode] = [[\n(handler . ,(lambda ($context) ${HandlerCode}))]]
HandlerSection_empty [ kwhandler] = [[\n(handler . nil)]]
FinallySection_code [ kwfinally Code] = [[\n(finally . ,(lambda ($context) ${Code}))]]
FinallySection_empty [ kwfinally] = [[\n(finally . nil)]]
ChildrenSection [ kwchildren @Child] = [[\n(children . (${Child}))]]
ConnectionsSection [ kwconnections @Connection] = [[\n(connections . (${Connection}))]]

Connection [ Sender NetNameRef left @Receiver right] = [[\n((${Sender}. (${Receiver})))]]
Child [ ComponentNameRef FunctionOrComponent] = [[\n(${ComponentNameRef} . ${FunctionOrComponent})]]
FunctionOrComponent [ fc] = [[${fc}]]
FunctionRef [ klxlambda FunctionNameRef] = [[${FunctionNameRef}]]
HandlerCode [ pre mh post ] = [[${pre}${mh}${post}]]
Code [Statement] = [[${Statement}]]

Statement [ st] = [[${st}]]
SynonymStatement [ Lvalue Syn Rvalue @continuation] = [[(let ((${support.makeLispName (Lvalue)} ${Rvalue}))${support.formatContinuation (continuation)})\n]]
AssignmentStatement [ Lvalue move Rvalue @continuation] = [[(setf ${support.makeLispName (Lvalue)} ${Rvalue})${support.formatContinuation (continuation)}\n]]
ExpressionStatement [Rvalue @continuation] = [[${Rvalue}${support.formatContinuation (continuation)})\n]]
ConcludeStatement [ kwconclude @continuation] = [[($dispatch-conclude $context)${support.formatContinuation (continuation)}]]
ReturnStatement [ kwreturn @Rvalue @continuation] = [[(values ${Rvalue})${support.formatContinuation (continuation)}]]
SendStatement [ kwsend TagName Rvalue @continuation] = [[${kwsend}${TagName}${Rvalue}${support.formatContinuation (continuation)}]]
InjectStatement [ kwinject Receiver Rvalue @continuation] = [[($inject ${Receiver} ${Rvalue} $context nil)${support.formatContinuation (continuation)}]]
ExternalCodeStatement [ ExternalCode @continuation] = [[(assert nil) ;; ${ExternalCode}${support.formatContinuation (continuation)}]]
ConditionalStatement [ Lbracket PredicateTest @CondClause Rbracket @continuation]
  = [[(let (($pred ${PredicateTest}))${CondClause}${support.formatContinuation (continuation)})]]
MessageHandler [ Lbracket @HandlerClause Rbracket @continuation] = [[\n(cond${HandlerClause})${support.formatContinuation (continuation)}]]

CondClause [ Choice Rvalue kcolon Code] = [[((equal ${Rvalue} $pred) ${Code})]]
HandlerClause [ Choice TagNameRef kcolon Code] = [[\n((string= ${TagNameRef} (?etag-from-message $message))${Code})]]
Lvalue [ LocalAccessor] = [[${LocalAccessor}]]
Rvalue [ bl] = [[${bl}]]
LocalAccessor_call [a args] = [[${a}${args}]]
LocalAccessor_lookup [ LocalNameRef Lookup LocalAccessor] = [[${LocalNameRef}${Lookup}${LocalAccessor}]]
LocalAccessor_slot [ LocalNameRef Slot LocalAccessor] = [[${LocalNameRef}${Slot}${LocalAccessor}]]
LocalAccessor_final [ LocalNameRef] = [[${support.makeLispName (LocalNameRef)}]]
Sender [ ComponentNameRef TagNameRef] = [[${ComponentNameRef}${TagNameRef}]]
Receiver [ ComponentNameRef TagNameXRef] = [[${ComponentNameRef}${TagNameXRef}]]
Args [ Lpar @Rvalue Rpar] = [[${Lpar}${Rvalue}${Rpar}]]
DefToken [ kwdef] = [[${kwdef}]]
SignatureToken [ kwsignature] = [[${kwsignature}]]
ComponentNameDef [ ComponentName] = [[ ${ComponentName}]]
ComponentNameRef [ ComponentName] = [[ ${ComponentName}]]
LocalNameDef [ IdentToken] = [[ ${IdentToken}]]
LocalNameRef [ IdentToken] = [[ ${IdentToken}]]
NetNameDef [ IdentToken] = [[ ${IdentToken}]]
NetNameRef [ IdentToken] = [[ ${IdentToken}]]
FunctionNameRef [ IdentToken] = [[ ${IdentToken}]]
TagNameDef [ TagName] = [[ ${TagName}]]
TagNameRef [ TagName] = [[ ${TagName}]]
TagNameXRef [ TagName] = [[ ${TagName}]]
ComponentName [ klxlbracket ident klxrbracket] = [[${ident}]]
TagName [ klxlport ident klxrport] = [[${ident}]]
Yes [ kwyes] = [[T]]
No [ kwno] = [[nil]]
Trigger [ kwtrigger] = [[T]]
ArgsKW [a] = [[${a}]]
MessageData [ kwmessagedata] = [[(?data-from-message $message)]]
MessageEtag [ kwmessageetag] = [[(?etag-from-message $message)]]
BuiltinConstant [ kw] = [[${kw}]]


Token [t] = [[${t}]]

GenericToken [klb dq1 ktoken dq2 kcolon s1 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${s1}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
NLToken [klb dq1 ktoken dq2 kcolon dq5 knl dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${knl}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
WSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kws}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
LexToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
TextToken [klb dq1 ktoken dq2 kcolon dq5 ktext dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ktext}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
IdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
CompoundToken [klb dq1 ktoken dq2 kcolon dq5 kcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kcompoun}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
EndCompoundToken [klb dq1 ktoken dq2 kcolon dq5 kendcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kendcompound}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]


string [dq1 @cs dq2] = [[${dq1}${cs}${dq2}]]
dq [c] = [[${c}]]
stringChar [c] = [[${c}]]

number [@ds] = [[${ds}]]

LineToken [klb dq1 ktoken dq2 kcolon dq5 kline dq6 kcomma dq3 kcontent dq4 kcolon2 nn krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kline}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${nn}${krb}${optcomma}\n]]

LportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
LbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]


  CompoundIdentToken [t] = [[${t}]]
  Component [lb @compoundname rb] = [[${lb}${compoundname}${rb}]]
  Port [lp @compoundname rp] = [[${lp}${compoundname}${rp}]]
  CompoundName [t] = [[${t}]]
SubWSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
OldSubIdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



SubIdentToken [klb dq1 ktoken dq2 kcolon dq5 ksubident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ksubident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [["${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [["${support.mangle (compoundident)}"]]
  ident_raw [identfirst @identrest] = [["${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  nl [c] = [[${c}]]

  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]

ReceiverRef [component tag] = [['(${component} . ${tag})]]