
Main [x] = [[${x}]]

ASCScript [@asc @sig] = [[${asc}${sig}]]

ASCComponent [ DefSection NameSection EtagsSection InputsSection OutputsSection NetsSection LocalsSection InitiallySection HandlerSection FinallySection ChildrenSection ConnectionsSection] =
  {{ support.pushPrototypeName (_DefSection._glue ()); }}
[[(defparameter *${support.makeLispName (DefSection)}*\n\`(${NameSection}${EtagsSection}\n($args . nil)${InputsSection}${OutputsSection}${NetsSection}${LocalsSection}${InitiallySection}${HandlerSection}${FinallySection}${ChildrenSection}${ConnectionsSection}))\n${support.popPrototypeName ()}]]

Signature [ Signature NameSection EtagsSection InputsSection OutputsSection] 
    = [[\n(defparameter *${support.makeLispName (Signature)}-signature*\n\`(${NameSection}${EtagsSection}${InputsSection}${OutputsSection}))]]

DefTopLevel [ kDef ComponentNameDef] = [[${ComponentNameDef}]]
SignatureTopLevel [ kSig ComponentNameDef] = [[${ComponentNameDef}]]
NameSection [ kwname ComponentName] = [[\n(name . ${ComponentName})]]
EtagsSection [ kwetags @TagNameList] = [[\n(etags . (${TagNameList}))]]
InputsSection [ kwinputs @TagNameList] = [[\n(inputs . (${TagNameList}))]]
OutputsSection [ kwoutputs @TagNameList] = [[\n(outputs . (${TagNameList}))]]
NetsSection [ kwnets @NetNameListItem] = [[\n(nets . (${NetNameListItem}))]]
OwnSection [ kwown @OwnNameListItem] = [[\n(locals . (${OwnNameListItem}))]]

InitiallySection_op [k op] = [[\n(initially . ${op})]]
InitiallySection_empty [k] = [[\n(initially . nil)]]
  
HandlerSection_op [k op]  = [[\n(handler . ${op})]]
HandlerSection_empty [k]  = [[\n(handler . nil)]]

FinallySection_op [k op]  = [[\n(finally . ${op})]]
FinallySection_empty [k]  = [[\n(finally . nil)]]

ChildrenSection_op [k @op] = [[\n(children . (${op}))]]
ChildrenSection_empty [k] = [[\n(children . nil)]]
  
ConnectionsSection_op [k op] = [[\n(connections . (${op}))]]
ConnectionsSection_empty [k] = [[\n(connections . nil)]]

AnonymousFunction [opr] = [[\n,(lambda ($context) ${opr})]]





Operation [op] = [[\n${op}]]

Op_CreateAndSetTempFromArgs [idleft kop idright @op] = [[(let ((${support.makeLispName (idleft)} ($?field ($?field $context '$args) '${support.makeLispName (idright)})))\n${op})]]

Op_CreateAndSetTempFromLookup [idleft kop idright @op] = [[(let ((${support.makeLispName (idleft)} ($?field ($?field-recursive $context '$args) '${support.makeLispName (idright)})))\n${op})]]

Op_SetOwnFromConstant [idleft kop idright @op] = [[($!local $context ${idleft} ${support.makeLispName (idright)})${op}]]

Op_InjectFromTemp [kinject c p id @op] = [[($inject '(${c} . ${p}) ${support.makeLispName(id)} $context nil)${op}]]

Op_SetOwnFromVerbatim [idleft kop vi @op] = [[($!local $context ${idleft} ${support.decodeVerbatim (vi)})${op}]]

Op_SetOwnFromMessageData [idleft kop idright @op] = [[($!local $context ${idleft} (?data-from-message ${support.makeLispName (idright)}))${op}]]

Op_SetOwnFromMessageEtag [idleft kop idright @op] = [[($!local $context ${idleft} (?etag-from-message ${support.makeLispName (idright)}))${op}]]

Op_Conclude [k @op] = [[($dispatch-conclude $context)${op}]]

Op_Pass [k @op] = [[nil${op}]]

Op_ReturnOwnVariables [k @ids @op] = [[(values ${ids})${op}]]

Op_SelfConnection [k p n c p2 @op] = [[(("$self" . ${p}) . ((${c} . ${p2})))${op}]]

Op_ChildConnection [c1 p1 n c2 p2 @op] = [[((${c1} . ${p1}) . ((${c2} . ${p2})))${op}]]

Op_ChildToSelfConnection [c1 p1 n kself p2 @op] = [[((${c1} . ${p1}) . (("$self" . ${p2})))${op}]]

Op_CallPredicateOfTempWithArgs [id1 kdot id2 klp @args krp @op] = [[(${support.makeLispName (id2)} ${support.makeLispName (id1)} ${args})${op}]]
Op_CallPredicateOfTempWithNoArgs [id1 kdot id2 klp krp @op] = [[(${support.makeLispName (id2)} ${support.makeLispName (id1)})${op}]]

Op_SendConstant [ksend p c @op] = [[($send '(${support.getPrototypeName ()} . ${p}) ${c} $context $message)${op}]]
Op_SendCallMethodWithNoArgs [ksend p kat id1 kdot method  klp krp @op] = [[($send '(${support.getPrototypeName ()}. ${p}) (${support.makeLispName (method)} ${support.makeLispName (id1)}) $context $message)${op}]]
Op_SendVerbatim [ksend p id @op] = [[($send '(${support.getPrototypeName ()} . ${p}) ${support.decodeVerbatim (id)} $context $message)${op}]]

Op_ConditionalMethodWithArgs [kleft kat id1 kdot id2 klp @args krp @clause kright @op]
  = [[(let (($pred (${support.makeLispName (id2)} ${support.makeLispName (id1)} ${args})))\n(cond ${clause})${op})]]
Op_ConditionalMethod [kleft kat id1 kdot id2 klp krp @clause kright @op]
  = [[(let (($pred (${support.makeLispName (id2)} ${support.makeLispName (id1)})))\n(cond ${clause})${op})]]
Op_ConditionalFunction [kleft kat id1 klp krp @clause kright @op]
  = [[(let (($pred (${support.makeLispName (id1)})))\n(cond ${clause})${op})]]
Op_ConditionalFunctionWithArgs [kleft kat id1 klp @args krp @clause kright @op]
  = [[(let (($pred (bbb ${support.makeLispName (id1)} ${args})))\n(cond ${clause})${op})]]

Op_CallExternalPredicateWithArgs [kat id klp @args krp @op] = [[(${support.makeLispName (id)} ${args})${op}]]
Op_CallExternalPredicateNoArgs [kat id klp krp @op] = [[(ccc ${support.makeLispName (id)})${op}]]

Op_SendMessageData [ksend p data @op]
 = [[($send '(${support.getPrototypeName ()} . ${p}) $context $message (?edata-from-message ${data}))${op}]]

Op_handler [h @op] = [[${h}${op}]]

Child [c] = [[${c}]]
ChildSelfExternalFunction [kself klambda id] = [[\n("$self" . ${id})]]
ChildComponent [c1 c2] = [[\n(${c1} . ${c2})]]



CondClause [cl] = [[${cl}]]
CondClauseWithTest [k constant kcolon op] = [[\n((equal ${support.makeLispName (constant)} $pred)${op})]]
DefaultCondClause [k kcolon op] = [[\n(t ${op})]]

AnonymousHandlerFunction [opr] = [[\n,(lambda ($context $message)\n${opr})]]
Handler_withoutDefault [left @h right] = [[\n(cond ${h}\n(t (error-unhandled-message $context $message)))]]
Handler_withDefault [left @h right] = [[\n(cond ${h})]]

MessageHandlerClause [k portname kcolon op] = [[\n((string= ${portname} (?etag-from-message $message)) ${op})]]
DefaultHandlerClause [k kcolon op] = [[\n(t ${op})]]

Constant_yes [k] = [[$yes]]
Constant_no [k] = [[$no]]
Constant_trigger [k] = [[t]]
Constant_none [k] = [[nil]]



  ComponentName [left @cs right] = [[${cs}]]
  PortName  [i] = [[${i}]]
  TagName [left @cs right] = [[${cs}]]
  NetName  [i] = [[${i}]]
  TempName [i] = [[${i}]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [["${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [["${support.mangle (compoundident)}"]]
  ident_verbatim [s] = [[${support.decodeVerbatim (s)}]]
  ident_raw [identfirst @identrest] = [["${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  nl [c] = [[${c}]]

  separator [c] = [[${c}]]
  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]

Token [t] = [[${t}]]

GenericToken [klb dq1 ktoken dq2 kcolon s1 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${s1}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
NLToken [klb dq1 ktoken dq2 kcolon dq5 knl dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${knl}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
WSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kws}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
LexToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
TextToken [klb dq1 ktoken dq2 kcolon dq5 ktext dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ktext}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
IdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
CompoundToken [klb dq1 ktoken dq2 kcolon dq5 kcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kcompoun}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
EndCompoundToken [klb dq1 ktoken dq2 kcolon dq5 kendcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kendcompound}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]


string [dq1 @cs dq2] = [[${dq1}${cs}${dq2}]]
dq [c] = [[${c}]]
stringChar [c] = [[${c}]]

number [@ds] = [[${ds}]]

LineToken [klb dq1 ktoken dq2 kcolon dq5 kline dq6 kcomma dq3 kcontent dq4 kcolon2 nn krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kline}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${nn}${krb}${optcomma}\n]]

LportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
LbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]


  CompoundIdentToken [t] = [[${t}]]
  Component [lb @compoundname rb] = [[${lb}${compoundname}${rb}]]
  Port [lp @compoundname rp] = [[${lp}${compoundname}${rp}]]
  CompoundName [t] = [[${t}]]
SubWSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
OldSubIdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



SubIdentToken [klb dq1 ktoken dq2 kcolon dq5 ksubident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ksubident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [["${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [["${support.mangle (compoundident)}"]]
  ident_raw [identfirst @identrest] = [["${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  nl [c] = [[${c}]]

  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]

TagNameListItem [id] = [[${id} ]]
TagNameDestructuringListItem [id] = [[(${id} (${id})) ]]
NetNameListItem [L] = [[${L} ]]
TempNameDestructuringListItem [L] = [[(${L} (${L})) ]]
ReturnItem [id] = [[\n($?local $context ${id})]]
Arg [id] = [[${id} ]]

verbatimident [k id] = [[${k}${id}]]
