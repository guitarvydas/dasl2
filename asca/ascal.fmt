
Main [x] = [[${x}]]

ASCScript [asc sig] = [[${asc]${sig}]]

ASCComponent [ DefSection NameSection EtagsSection InputsSection OutputsSection NetsSection LocalsSection InitiallySection HandlerSection FinallySection ChildrenSection ConnectionsSection] =
  {{ support.pushPrototypeName (_DefSection._glue ()); }}
[[(defparameter *${support.makeLispName (DefSection)}*\n\`(${NameSection}${EtagsSection}\n($args . nil)${InputsSection}${OutputsSection}${NetsSection}${LocalsSection}${InitiallySection}${HandlerSection}${FinallySection}${ChildrenSection}${ConnectionsSection}))\n${support.popPrototypeName ()}]]

Signature [ Signature NameSection EtagsSection InputsSection OutputsSection] 
    = [[\n(defparameter *${support.makeLispName (Signature)}-signature*${NameSection}${EtagsSection}${InputsSection}${OutputsSection})]]

DefTopLevel [ kDef ComponentNameDef] = [[${ComponentNameDef}]]
SignatureTopLevel [ kSig ComponentNameDef] = [[${ComponentNameDef}]]
NameSection [ kwname ComponentName] = [[\n(name . ${ComponentName})]]
EtagsSection [ kwetags @TagNameDef] = [[\n(etags . (${TagNameDef}))]]
InputsSection [ kwinputs @TagName] = [[\n(inputs . (${TagName}))]]
OutputsSection [ kwoutputs @TagName] = [[\n(outputs . (${TagName}))]]
NetsSection [ kwnets @NetName] = [[\n(nets . (${NetName}))]]
OwnSection [ kwown @OwnName] = [[\n(locals . (${OwnName}))]]

InitiallySection_op [k op] = [[${k}${op}]]
InitiallySection_empty [k] = [[${k}]]
  
HandlerSection_op [k op]  = [[${k}${op}]]
HandlerSection_empty [k]  = [[${k}]]

FinallySection_op [k op]  = [[${k}${op}]]
FinallySection_empty [k]  = [[${k}]]

ChildrenSection_op [k @op] = [[${k}${op}]]
ChildrenSection_empty [k] = [[${k}]]
  
ConnectionsSection_op [k op] = [[${k}${op}]]
ConnectionsSection_empty [k] = [[${k}]]


Operation_CreateAndSetTempFromArgs [idleft kop idright @op] = [[${idleft}${kop}${idright}${op}]]
Operation_SetTempFromOwn [idleft kop idright @op] = [[${idleft}${kop}${idright}${op}]]
Operation_SetOwnFromConstant [idleft kop idright @op] = [[${idleft}${kop}${idright}${op}]]
Operation_InjectFromTemp [kinject c p id @op] = [[${kinject}${c}${p}${id}${op}]]
Operation_SetOwnFromMessageData [idleft kop idright @op] = [[${idleft}${kop}${idright}${op}]]
Operation_Conclude [k @op] = [[${k}${op}]]
Operation_Pass [k @op] = [[${k}${op}]]
Operation_ReturnOwnVariables [k @id @op] = [[${k}${id}${op}]]
Operation_SelfConnection [k p n c p2 @op] = [[${k}${p}${n}${c}${p2}${op}]]
Operation_ChildConnection [c1 p1 n c2 p2 @op] = [[${c1}${p1}${n}${c2}${p2}${op}]]
Operation_ChildToSelfConnection [c1 p1 kself c2 p2 @op] = [[${c1}${p1}${kself}${c2}${p2}${op}]]
Operation_CallPredicateOfTempWithNoArgs [id1 kdot id2 klp krp @op] = [[${id1}${kdot}${id2}${klp}${krp}${op}]]
Operation_SendConstant [ksend p c @op] = [[${ksend}${p}${c}${op}]]
Operation_ConditionalMethod [kleft kat id1 kdot kid2 klp krp @op] = [[${kleft}${kat}${id1}${kdot}${kid2}${klp}${krp}${op}]]
Operation_ConditionalFunction [kleft kat id1 klp krp = [[${kleft}${kat}${id1}${klp}${krp}${op}]]
Operation_CallExternalPredicateNoArgs [kat id klp krp] = [[${kat}${id}${klp}${krp}]]
Operation_SendMessageData [ksend p kdata] = [[${ksend}${p}${kdata}]]

Child [c] = [[${c}]]
ChildSelfExternalFunction [kself klambda id] = [[${kself}${klambda}${id}]]
ChildComponent [c1 c2] = [[${c1}${c2}]]



Handler [@op1 left @clause right @op2] = [[${op1}${left}${clause}${right}${op2}]]


CondClause [k constant kcolon op] = [[${k}${constant}${kcolon}${op}]]
HandlerClause [k portname kcolon op] = [[${k}${portname}${kcolon}${op}]]
Constant [k] = [[${k}]]



  ComponentName [left @cs right] = [[${left}${cs}${right}]]
  PortName  [i] = [[${i}]]
  TagName [left @cs right] = [[${left}${cs}${right}]]
  NetName  [i] = [[${i}]]
  TempName [i] = [[${i}]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [["${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [["${support.mangle (compoundident)}"]]
  ident_raw [identfirst @identrest] = [["${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  identAny [c] = [[${c}]]
  nl [c] = [[${c}]]

  separator [c] = [[${c}]]
  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]

Token [t] = [[${t}]]

GenericToken [klb dq1 ktoken dq2 kcolon s1 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${s1}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
NLToken [klb dq1 ktoken dq2 kcolon dq5 knl dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${knl}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
WSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kws}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
LexToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
TextToken [klb dq1 ktoken dq2 kcolon dq5 ktext dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ktext}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
IdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
CompoundToken [klb dq1 ktoken dq2 kcolon dq5 kcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kcompoun}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
EndCompoundToken [klb dq1 ktoken dq2 kcolon dq5 kendcompound dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kendcompound}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]


string [dq1 @cs dq2] = [[${dq1}${cs}${dq2}]]
dq [c] = [[${c}]]
stringChar [c] = [[${c}]]

number [@ds] = [[${ds}]]

LineToken [klb dq1 ktoken dq2 kcolon dq5 kline dq6 kcomma dq3 kcontent dq4 kcolon2 nn krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${kline}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${nn}${krb}${optcomma}\n]]

LportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RportToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
LbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]
RbracketToken [klb dq1 ktoken dq2 kcolon dq5 klex dq6 kcomma dq3 kcontent dq4 kcolon2 dq7 s2 dq8 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${klex}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${dq7}${s2}${dq8}${krb}${optcomma}\n]]


  CompoundIdentToken [t] = [[${t}]]
  Component [lb @compoundname rb] = [[${lb}${compoundname}${rb}]]
  Port [lp @compoundname rp] = [[${lp}${compoundname}${rp}]]
  CompoundName [t] = [[${t}]]
SubWSToken [klb dq1 ktoken dq2 kcolon dq5 kws dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]
OldSubIdentToken [klb dq1 ktoken dq2 kcolon dq5 kident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}subident${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



SubIdentToken [klb dq1 ktoken dq2 kcolon dq5 ksubident dq6 kcomma dq3 kcontent dq4 kcolon2 s2 krb @optcomma]
  = [[${klb}${dq1}${ktoken}${dq2}${kcolon}${dq5}${ksubident}${dq6}${kcomma}${dq3}${kcontent}${dq4}${kcolon2}${s2}${krb}${optcomma}\n]]



keyword [x] = [[${x}]]
ExternalCode [ lb @cs rb ] = [[${lb}${cs}${rb}]]
uriChar [c] = [[${c}]]

  identIncludingSpaces [@cs] = [["${support.mangle (cs)}"]]
  identCharIncludingSpace [c] = [[${c}]]
  ident_bracketed [left compoundident right] = [["${support.mangle (compoundident)}"]]
  ident_raw [identfirst @identrest] = [["${support.mangle (identfirst + identrest)}"]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  nl [c] = [[${c}]]

  lineNumber [left @ds right] = [[${left}${ds}${right}]]
  space [c] = [[${c}]]

ReceiverRef [component tag] = [['(${component} . ${tag})]]
