 asc [eval](e) >> (result)
          $inject e >> [stack memo](e)
          $send (result) $eval(e)

    components
      [stack memo](e) >> (e) (previous stack)
          $send (previous stack) ?(get lru list pointer)
          $send (e) e
	  [eval](e) >> (result)
	      $send (result) @eval(e)
	  [gc](keep)(previous stack) >> (result)

          $slot (previous sp)
          $on (previous sp)
            $set (previous sp) := $data
          $on (keep)
            @gc $data
    	    $send (result) e
    end components

    connections
     [stack memo](e) >> [eval](e)
     [stack memo](previous stack) >> [gc](previous stack)
     [eval](result) >> [gc](keep)
     [gc](result) >> [$self](result)
    end connections

end asc
