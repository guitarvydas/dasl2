def
  ~.name = "read"
  ~.tag "src" = (src)
  ~.tag "return" = (index (atom space modified))
  ~.inputs = ["src"]
  ~.outputs = ["return"]
  ~.ancestor = "read eval format"
  ~.locals = []
  ~.input-queue = []
  ~.output-queue = []
  ~.before = %fn{%asc{%inject (src) >> [trim leading spaces](src)}}
  ~.handler = %handler{}
  ~.after = %fn{%asc{%return index (atom space)}}
  ~.children = [
        [trim leading spaces](src) >> (text)
	[$1](text) >> (no) (yes)
	[read atom](start) >> (answer)
	[read list](start) >> (answer)
  ]
  ~.connections = [
        [$self](src) >> [trim leading spaces](src)
	[trim leading spaces](text) >> [$1](text)
	[$1](no) >> [read atom](start)
	[$1](yes) >> [read list](start)
        [read atom](answer) >> [$self](index)
        [read list](answer) >> [$self](index)
  ]

def
  ~.name = "$1"
  ~.tag "text" = (text)
  ~.tag "yes" = (yes)
  ~.tag "no" = (no)
  ~.inputs = ["text"]
  ~.outputs = ["yes" "no"]
  ~.ancestor = "read"
  ~.locals = []
  ~.input-queue = []
  ~.output-queue = []
  ~.before = %fn{%asc{
    $if ?(lookahead lpar)(text) $then
        $send text >> (no)
    $else
        $send text >> (yes)
    $end if
    }}
  ~.handler = %handler{}
  ~.after = %fn{%asc{%return index (atom space)}}
  ~.children = [
  ]
  ~.connections = [
  ]

def
  ~.name = "read atom"
  ~.tag "text" =(text)
  ~.tag "answer" = (answer)
  ~.inputs = ["text"]
  ~.outputs = ["answer"]
  ~.ancestor = "read"
  ~.locals = []
  ~.input-queue = []
  ~.output-queue = []
  ~.before = %fn{}
  ~.handler = %handler{}
  ~.after = %fn{%asc{%send @read-atom (text) >> (answer)}}
  ~.children = []
  ~.connections = []

def
  ~.name = "read atom"
  ~.tag "text" =(text)
  ~.tag "answer" = (answer)
  ~.inputs = ["text"]
  ~.outputs = ["answer"]
  ~.ancestor = "read"
  ~.locals = []
  ~.input-queue = []
  ~.output-queue = []
  ~.before = %fn{}
  ~.handler = %handler{}
  ~.after = %fn{%asc{%send @read-list (text) >> (answer)}}
  ~.children = []
  ~.connections = []
