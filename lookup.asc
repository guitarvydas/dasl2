asc [lookup] (name) >> (found answer)
  $initially
    $inject name >> [scroll through atoms](name)
  $finally
    $return (found answer)

  components
    [$self](answer)(found) >> ()
    [scroll through atoms](name)(advance) >> (EOF) (try 1 name match)
    [match single atom name](go) >> (mismatch) (ok)
    [unsuccessul](conclude) >> (found)
    [successul](conclude) >> (found answer)
  end components
  connections
      [scroll through atoms](EOF) -> [unsuccessful](conclude)
      [scroll through atoms](try 1 name match) -> [match single atom name](go)
      [match single atom name](mismatch) -> [scroll through atoms](advance)
      [match single atom name](ok) -> [successful](conclude)
      [unsuccessful](found) -> [$self](found)
      [successful](found) -> [$self](found)
      [successful](answer) -> [$self](answer)
  end connections
end sc

def [scroll through atoms](name)(advance) >> (EOF)(try 1 name match)
        $if ?no more atoms $then
	    $send EOF $trigger
        $end if
        name: 
            $send name >> (try 1 name match)
	advance: 
            @advance to next atom
	    $send name >> (try 1 name match)

def [$self](answer)(found) >> ()
        answer: 
            $set answer := $data
        found: 
	    $set found := $data
	    $conclude

def [match single atom name](go) >> (mismatch) (ok)
  $case
    go >> $if (?match-string) $then 
       $Send ok $yes
    $else
       $Send mismatch $yes

def [unsuccessul](conclude) >> (found)
  ?[
       | conclude : 
           $Send $none >> found
           $conclude
  ]?
  
def [successul](conclude) >> (found answer)
  ?[
       | conclude :
            $send answer >> answer
            $Send $trigger >> found
            $conclude
  ]?