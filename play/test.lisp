(defun list-cells ()
  (let ((i *mru-list-pointer*)
        (stop $NIL)
        (result nil))
    (loop
     (when (>= i stop) (return))
     (push ($get i) result)
     (incf i))
    (reverse result)))

(defun main0 ()
  (initialize-memory)
  ;; (quote A)
  (let ((index-A ($putatom '(#\A))))
    (let ((list-to-be-interpreted ($cons kQuote ($cons index-A $NIL))))
      (let ((result ($eval list-to-be-interpreted $NIL)))
	(format *standard-output* "~a~%" result)))))

(defun main1 ()
  (initialize-memory)
  (let ((index-G ($putatom '(#\G)))
        (index-H ($putatom '(#\H))))

    ;; (G H)
    (let ((listGH
           ($cons index-G 
                  ($cons index-H $NIL))))
      ($print listGH)
      (let ((quote-listGH ($cons kQuote ($cons listGH $NIL))))
        ($print quote-listGH)
        (let ((car-quote-listGH ($cons kCar ($cons quote-listGH $nil))))
          ($print car-quote-listGH)
          (let ((result ($eval car-quote-listGH $NIL)))
            ($print result)
            (format *standard-output* "LSP=~a~%memory: ~a~%list: ~a~%~a~%" *mru-list-pointer* *memory* (list-cells) result)))))))

(defun old-main ()
  (initialize-memory)
  (let ((index-G ($putatom '(#\G)))
        (index-H ($putatom '(#\H)))
        (index-I ($putatom '(#\I))))

    ;; (G H)
    (let ((listGH
           ($cons index-G 
                  ($cons index-H $NIL))))
      ($print listGH)
      (let ((quote-listGH ($cons kQuote ($cons listGH $NIL))))
        ($print quote-listGH)
        (let ((third ($cons kCdr ($cons quote-listGH $nil))))
          ($print third)
          (let ((quote-i-third ($cons
                                ($cons kQuote ($cons index-I $NIL))
                                ($cons third $NIL))))
            ($print quote-i-third)
            (let ((program ($cons kCons quote-i-third)))
              ($print program)
              (let ((result ($eval program $NIL)))
                ($print result)
                (format *standard-output* "LSP=~a~%memory: ~a~%list: ~a~%~a~%" *mru-list-pointer* *memory* (list-cells) result)))))))))

(defun main10 ()
  (initialize-memory)
  ;; (Quote A)
  (let ((mem (make-instance 'atom-memory :bytes *memory*)))
    (let ((program ($read "(QUOTE A)" mem)))
      (let ((result ($eval program $NIL)))
	(format *standard-output* "~a~%" result)
        ($print result)))))
  
(defun main11 ()
  (initialize-memory)
  (let ((mem (make-instance 'atom-memory :bytes *memory*)))
;;    (let ((program ($read "(CONS (QUOTE A) (QUOTE B))" mem)))
    (let ((program ($read "((LAMBDA (X) X) (CONS (QUOTE P) (QUOTE Q)))" mem)))
;;    (let ((program ($read "((LAMBDA (X) (QUOTE X)) (CONS (QUOTE A) (QUOTE B)))" mem)))
      (let ((result ($eval program $NIL)))
	(format *standard-output* "~%~%result ~a~%" result)
        ($print result)))))

(defun main ()
  (initialize-memory)
  (let ((mem (make-instance 'atom-memory :bytes *memory*)))
    (let ((program ($read "A" mem)))
      ($print program))
    (let ((program ($read "(B)" mem)))
      ($print program))
    (let ((program ($read "(C D)" mem)))
      ($print program))
    (let ((program ($read "(CONS (QUOTE E) (QUOTE F))" mem)))
      (let ((v ($eval program $NIL)))
        ($print v)))
    (let ((program ($read "((LAMBDA (X) X) (CONS (QUOTE G) (QUOTE H)))" mem)))
      (let ((v ($eval program $NIL)))
        ($print v)))
    (let ((program ($read "((LAMBDA (X) (QUOTE A)) (CONS (QUOTE I) (QUOTE J)))" mem)))
      (format *standard-output* "mru list pointer before eval ~a~%" *mru-list-pointer*)
      (let ((v ($eval program $NIL)))
      (format *standard-output* "mru list pointer after eval ~a~%" *mru-list-pointer*)
        ($print v)))
    ))

(defun main13 ()
  (initialize-memory)
  (let ((mem (make-instance 'atom-memory :bytes *memory*)))
    (let ((program ($read "((LAMBDA (X) (QUOTE A)) (CONS (QUOTE I) (QUOTE J)))" mem)))
      (format *standard-output* "mru list pointer before eval ~a~%" *mru-list-pointer*)
      (let ((v ($eval program $NIL)))
      (format *standard-output* "mru list pointer after eval ~a~%" *mru-list-pointer*)
        ($print v)))
    ))
